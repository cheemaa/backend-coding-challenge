(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

/******************************************************************************************

Alchemytec Coding Test for Expenses Back End

******************************************************************************************/

// App files

require("./partials.js");
require("./expenses/main.js");

// Declare app level module which depends on filters, and services
var app = angular.module("alcExpenses", ["alcShared", "codingtest.partials", "expenses.controllers"]);

app.run(["$rootScope", function ($rootScope) {
	// Basic config options
	var gulpBuildConfig = {};
	$rootScope.config = angular.extend({ angular: angular.version.full }, gulpBuildConfig);

	// Headings used by the menu bars
	$rootScope.mainTitle = "";
	$rootScope.mainHeading = "";

	// Sections of content are used for bookmark navigation
	$rootScope.contentSections = [];

	// App sections are distinct areas of the website
	// These will ultimately be retrieved from the server
	$rootScope.appSections = $rootScope.appSections || [];

	// Initialise tab sections
	$rootScope.tabSections = $rootScope.tabSections || {};
	$rootScope.currentSection = [];
	$rootScope.selectTabSection = function (currentSection, selectedIndex) {
		if ($rootScope.tabSections[currentSection]) {
			$rootScope.currentSection = angular.copy($rootScope.tabSections[currentSection]);

			for (var u = 0; u < $rootScope.currentSection.length; u++) {
				if (u == selectedIndex) $rootScope.currentSection[u].active = true;else $rootScope.currentSection[u].active = false;
			}
		}
	};
}]);

// Bootstrap the app
$(document).ready(function () {
	angular.bootstrap("body", ["alcExpenses"]);
});

},{"./expenses/main.js":3,"./partials.js":4}],2:[function(require,module,exports){
"use strict";

/******************************************************************************************

Expenses controller

******************************************************************************************/

var app = angular.module("expenses.controller", []);

app.controller("ctrlExpenses", ["$rootScope", "$scope", "config", "restalchemy", function ExpensesCtrl($rootScope, $scope, $config, $restalchemy) {
	// Update the headings
	$rootScope.mainTitle = "Expenses";
	$rootScope.mainHeading = "Expenses";

	// Update the tab sections
	$rootScope.selectTabSection("expenses", 0);

	$scope.ukVatPercentage = 0.2;

	var restExpenses = $restalchemy.init({ root: $config.apiroot }).at("expenses");
	var fx = require("money");
	fx.settings = {
		from: "EUR",
		to: "GBP"
	};

	this.$onInit = function () {
		$.getJSON("http://api.fixer.io/latest?symbols=USD,GBP", function (data) {
			fx.rates = data.rates;
			fx.base = data.base;
		});
	};

	$scope.dateOptions = {
		changeMonth: true,
		changeYear: true,
		dateFormat: "dd/mm/yy"
	};

	var loadExpenses = function loadExpenses() {
		// Retrieve a list of expenses via REST
		restExpenses.get().then(function (expenses) {
			$scope.expenses = expenses;
		});
	};

	$scope.saveExpense = function () {
		if ($scope.expensesform.$valid) {
			// Post the expense via REST
			$scope.newExpense.amount = $scope.amountInPounds($scope.newExpense.amount);
			restExpenses.post($scope.newExpense).then(function () {
				// Clear the form
				$scope.clearExpense();
				// Reload new expenses list
				loadExpenses();
			});
		}
	};

	$scope.amountInPounds = function (amountStr) {
		var amount = parseFloat(amountStr);
		if (amountStr.endsWith("EUR")) {
			amount = fx.convert(amount);
		}

		return amount.toFixed(2);
	};

	$scope.clearExpense = function () {
		$scope.newExpense = {};
	};

	// Initialise scope variables
	loadExpenses();
	$scope.clearExpense();
}]);

},{"money":5}],3:[function(require,module,exports){
"use strict";

/******************************************************************************************

Tasks main

******************************************************************************************/

require("./expenses-controller.js");

var app = angular.module("expenses.controllers", ["expenses.controller"]);

app.config(["$routeProvider", function ($routeProvider) {
	// Labour analysis routes
	$routeProvider.when("/expenses", { templateUrl: "codingtest/expenses-content.html" });

	$routeProvider.otherwise({ redirectTo: "/expenses" });
}]);

app.run(["$rootScope", function ($rootScope) {
	// Add app button
	$rootScope.appSections = $rootScope.appSections || [];
	$rootScope.appSections.push({ title: "Expenses", image: "img/icon-generic.png", app: "expenses" });

	// Configure tab sections
	$rootScope.tabSections = $rootScope.tabSections || {};
	$rootScope.tabSections.expenses = [{ title: "Expenses", app: "expenses" }];
}]);

},{"./expenses-controller.js":2}],4:[function(require,module,exports){
"use strict";

angular.module("codingtest.partials", []).run(["$templateCache", function (e) {
  e.put("codingtest/expenses-content.html", '<div ng-controller="ctrlExpenses"><h2>Expenses</h2><div bookmarklist id="bookmarks" class="section-list"></div><h3>Add an expense</h3><form name="expensesform"><ul><li><label>Date</label><input type="text" ng-required="true" ng-model="newExpense.date" ui-date="dateOptions" placeholder="dd/mm/yyyy"></li><li><label>Amount</label><input type="text" ng-required="true" ng-model="newExpense.amount" placeholder="00.00"> <span ng-if="newExpense.amount.endsWith(\'EUR\')">{{amountInPounds(newExpense.amount)}} GBP</span></li><li><label>VAT</label><input type="text" ng-required="true" ng-value="newExpense.amount? (amountInPounds(newExpense.amount) * ukVatPercentage).toFixed(2) + \' GBP\': 0" placeholder="00.00" disabled="disabled"></li><li><label>Reason</label><textarea at-auto-resize ng-required="true" ng-model="newExpense.reason" ng-trim="false" placeholder="why oh why?"></textarea></li><li><label></label><button ng-click="saveExpense()" class="solid">Save Expense</button> <button ng-click="clearExpense()">cancel</button></li></ul></form><h3>Submitted expenses</h3><div class="list-table expenses-data"><div class="header-row"><div class="col-4">Date</div><div class="col-4 figures">Amount (inc. VAT)</div><div class="col-2 figures">VAT</div><div class="col-15">Reason</div></div><div ng-repeat="expense in expenses" class="body-row"><div class="col-4">{{expense.date | date:\'dd MMM yyyy\'}}</div><div class="col-4 figures">{{expense.amount | currency:"&pound;"}}</div><div class="col-2 figures">{{expense.vat | currency:"&pound;"}}</div><div class="col-15">{{expense.reason}}</div></div></div></div>');
}]);

},{}],5:[function(require,module,exports){
/*!
 * money.js / fx() v0.2
 * Copyright 2014 Open Exchange Rates
 *
 * JavaScript library for realtime currency conversion and exchange rate calculation.
 *
 * Freely distributable under the MIT license.
 * Portions of money.js are inspired by or borrowed from underscore.js
 *
 * For details, examples and documentation:
 * http://openexchangerates.github.io/money.js/
 */
(function(root, undefined) {

	// Create a safe reference to the money.js object for use below.
	var fx = function(obj) {
		return new fxWrapper(obj);
	};

	// Current version.
	fx.version = '0.2';


	/* --- Setup --- */

	// fxSetup can be defined before loading money.js, to set the exchange rates and the base
	// (and default from/to) currencies - or the rates can be loaded in later if needed.
	var fxSetup = root.fxSetup || {
		rates : {},
		base : ""
	};

	// Object containing exchange rates relative to the fx.base currency, eg { "GBP" : "0.64" }
	fx.rates = fxSetup.rates;

	// Default exchange rate base currency (eg "USD"), which all the exchange rates are relative to
	fx.base = fxSetup.base;

	// Default from / to currencies for conversion via fx.convert():
	fx.settings = {
		from : fxSetup.from || fx.base,
		to : fxSetup.to || fx.base
	};


	/* --- Conversion --- */

	// The base function of the library: converts a value from one currency to another
	var convert = fx.convert = function(val, opts) {
		// Convert arrays recursively
		if (typeof val === 'object' && val.length) {
			for (var i = 0; i< val.length; i++ ) {
				val[i] = convert(val[i], opts);
			}
			return val;
		}

		// Make sure we gots some opts
		opts = opts || {};

		// We need to know the `from` and `to` currencies
		if( !opts.from ) opts.from = fx.settings.from;
		if( !opts.to ) opts.to = fx.settings.to;

		// Multiple the value by the exchange rate
		return val * getRate( opts.to, opts.from );
	};

	// Returns the exchange rate to `target` currency from `base` currency
	var getRate = function(to, from) {
		// Save bytes in minified version
		var rates = fx.rates;

		// Make sure the base rate is in the rates object:
		rates[fx.base] = 1;

		// Throw an error if either rate isn't in the rates array
		if ( !rates[to] || !rates[from] ) throw "fx error";

		// If `from` currency === fx.base, return the basic exchange rate for the `to` currency
		if ( from === fx.base ) {
			return rates[to];
		}

		// If `to` currency === fx.base, return the basic inverse rate of the `from` currency
		if ( to === fx.base ) {
			return 1 / rates[from];
		}

		// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the
		// relative exchange rate between the two currencies
		return rates[to] * (1 / rates[from]);
	};


	/* --- OOP wrapper and chaining --- */

	// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style
	var fxWrapper = function(val) {
		// Experimental: parse strings to pull out currency code and value:
		if ( typeof	val === "string" ) {
			this._v = parseFloat(val.replace(/[^0-9-.]/g, ""));
			this._fx = val.replace(/([^A-Za-z])/g, "");
		} else {
			this._v = val;
		}
	};

	// Expose `wrapper.prototype` as `fx.prototype`
	var fxProto = fx.prototype = fxWrapper.prototype;

	// fx(val).convert(opts) does the same thing as fx.convert(val, opts)
	fxProto.convert = function() {
		var args = Array.prototype.slice.call(arguments);
		args.unshift(this._v);
		return convert.apply(fx, args);
	};

	// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from
	// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`
	fxProto.from = function(currency) {
		var wrapped = fx(convert(this._v, {from: currency, to: fx.base}));
		wrapped._fx = fx.base;
		return wrapped;
	};

	// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`
	fxProto.to = function(currency) {
		return convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});
	};


	/* --- Module Definition --- */

	// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.
	// Otherwise, just add `fx` to the global object
	if (typeof exports !== 'undefined') {
		if (typeof module !== 'undefined' && module.exports) {
			exports = module.exports = fx;
		}
		exports.fx = fx;
	} else if (typeof define === 'function' && define.amd) {
		// Return the library as an AMD module:
		define([], function() {
			return fx;
		});
	} else {
		// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.
		// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`
		fx.noConflict = (function(previousFx) {
			return function() {
				// Reset the value of the root's `fx` variable:
				root.fx = previousFx;
				// Delete the noConflict function:
				fx.noConflict = undefined;
				// Return reference to the library to re-assign it:
				return fx;
			};
		})(root.fx);

		// Declare `fx` on the root (global/window) object:
		root['fx'] = fx;
	}

	// Root will be `window` in browser or `global` on the server:
}(this));

},{}]},{},[1])

//# sourceMappingURL=../maps/codingtest.min.js.map
