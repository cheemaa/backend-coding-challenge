{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","js/apps/codingtest/codingtest-main.js","js/apps/codingtest/expenses/expenses-controller.js","js/apps/codingtest/expenses/main.js","js/apps/codingtest/partials.js","../../node_modules/money/money.js"],"names":[],"mappings":"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":"../backend-coding-challenge/codingtest.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\n/******************************************************************************************\n\nAlchemytec Coding Test for Expenses Back End\n\n******************************************************************************************/\n\n// App files\nrequire(\"./partials.js\");\nrequire(\"./expenses/main.js\");\n\n// Declare app level module which depends on filters, and services\nvar app = angular.module(\"alcExpenses\", [\n\t\"alcShared\",\n\t\"codingtest.partials\",\n\t\"expenses.controllers\"\n]);\n\napp.run([\"$rootScope\", function($rootScope) {\n\t// Basic config options\n\tvar gulpBuildConfig = {};\n\t$rootScope.config = angular.extend({ angular: angular.version.full }, gulpBuildConfig);\n\n\t// Headings used by the menu bars\n\t$rootScope.mainTitle = \"\";\n\t$rootScope.mainHeading = \"\";\n\n\t// Sections of content are used for bookmark navigation\n\t$rootScope.contentSections = [];\n\n\t// App sections are distinct areas of the website\n\t// These will ultimately be retrieved from the server\n\t$rootScope.appSections = $rootScope.appSections || [];\n\n\t// Initialise tab sections\n\t$rootScope.tabSections = $rootScope.tabSections || {};\n\t$rootScope.currentSection = [];\n\t$rootScope.selectTabSection = function(currentSection, selectedIndex) {\n\t\tif ($rootScope.tabSections[currentSection]) {\n\t\t\t$rootScope.currentSection = angular.copy($rootScope.tabSections[currentSection]);\n\n\t\t\tfor (var u = 0; u < $rootScope.currentSection.length; u++) {\n\t\t\t\tif (u == selectedIndex)\n\t\t\t\t\t$rootScope.currentSection[u].active = true;\n\t\t\t\telse\n\t\t\t\t\t$rootScope.currentSection[u].active = false;\n\t\t\t}\n\t\t}\n\t};\n}]);\n\n// Bootstrap the app\n$(document).ready(function() {\n\tangular.bootstrap(\"body\", [\"alcExpenses\"]);\n});\n","\"use strict\";\n\n/******************************************************************************************\n\nExpenses controller\n\n******************************************************************************************/\n\nvar app = angular.module(\"expenses.controller\", []);\n\napp.controller(\"ctrlExpenses\", [\"$rootScope\", \"$scope\", \"config\", \"restalchemy\", function ExpensesCtrl($rootScope, $scope, $config, $restalchemy) {\n\t// Update the headings\n\t$rootScope.mainTitle = \"Expenses\";\n\t$rootScope.mainHeading = \"Expenses\";\n\n\t// Update the tab sections\n\t$rootScope.selectTabSection(\"expenses\", 0);\n\n\t$scope.ukVatPercentage = 0.2;\n\n\tvar restExpenses = $restalchemy.init({ root: $config.apiroot }).at(\"expenses\");\n\tvar fx = require(\"money\");\n\tfx.settings = {\n\t\tfrom : \"EUR\",\n\t\tto : \"GBP\"\n\t};\n\n\tthis.$onInit = function() {\n\t\t$.getJSON(\"http://api.fixer.io/latest?symbols=USD,GBP\", function(data) {\n\t\t\tfx.rates = data.rates;\n\t\t\tfx.base = data.base;\n\t\t});\n\t};\n\n\t$scope.dateOptions = {\n\t\tchangeMonth: true,\n\t\tchangeYear: true,\n\t\tdateFormat: \"dd/mm/yy\"\n\t};\n\n\tvar loadExpenses = function() {\n\t\t// Retrieve a list of expenses via REST\n\t\trestExpenses.get().then(function(expenses) {\n\t\t\t$scope.expenses = expenses;\n\t\t});\n\t}\n\n\t$scope.saveExpense = function() {\n\t\tif ($scope.expensesform.$valid) {\n\t\t\t// Post the expense via REST\n\t\t\t$scope.newExpense.amount = $scope.amountInPounds($scope.newExpense.amount);\n\t\t\trestExpenses.post($scope.newExpense).then(function() {\n\t\t\t\t// Clear the form\n\t\t\t\t$scope.clearExpense();\n\t\t\t\t// Reload new expenses list\n\t\t\t\tloadExpenses();\n\t\t\t});\n\t\t}\n\t};\n\n\t$scope.amountInPounds = function(amountStr) {\n\t\tvar amount = parseFloat(amountStr);\n\t\tif(amountStr.endsWith(\"EUR\")) {\n\t\t\tamount = fx.convert(amount);\n\t\t}\n\n\t\treturn amount.toFixed(2);\n\t}\n\n\t$scope.clearExpense = function() {\n\t\t$scope.newExpense = {};\n\t};\n\n\t// Initialise scope variables\n\tloadExpenses();\n\t$scope.clearExpense();\n}]);\n","\"use strict\";\n\n/******************************************************************************************\n\nTasks main\n\n******************************************************************************************/\n\nrequire(\"./expenses-controller.js\");\n\nvar app = angular.module(\"expenses.controllers\", [\n\t\"expenses.controller\"\n]);\n\napp.config([\"$routeProvider\", function($routeProvider) {\n\t// Labour analysis routes\n\t$routeProvider.when(\"/expenses\", { templateUrl: \"codingtest/expenses-content.html\" });\n\n\t$routeProvider.otherwise({redirectTo: \"/expenses\"});\n}]);\n\napp.run([\"$rootScope\", function($rootScope) {\n\t// Add app button\n\t$rootScope.appSections = $rootScope.appSections || [];\n\t$rootScope.appSections.push({ title: \"Expenses\", image: \"img/icon-generic.png\", app: \"expenses\" });\n\n\t// Configure tab sections\n\t$rootScope.tabSections = $rootScope.tabSections || {};\n\t$rootScope.tabSections.expenses = [\n\t\t{ title: \"Expenses\", app: \"expenses\" }\n\t];\n}]);\n","angular.module(\"codingtest.partials\",[]).run([\"$templateCache\",function(e){e.put(\"codingtest/expenses-content.html\",'<div ng-controller=\"ctrlExpenses\"><h2>Expenses</h2><div bookmarklist id=\"bookmarks\" class=\"section-list\"></div><h3>Add an expense</h3><form name=\"expensesform\"><ul><li><label>Date</label><input type=\"text\" ng-required=\"true\" ng-model=\"newExpense.date\" ui-date=\"dateOptions\" placeholder=\"dd/mm/yyyy\"></li><li><label>Amount</label><input type=\"text\" ng-required=\"true\" ng-model=\"newExpense.amount\" placeholder=\"00.00\"> <span ng-if=\"newExpense.amount.endsWith(\\'EUR\\')\">{{amountInPounds(newExpense.amount)}} GBP</span></li><li><label>VAT</label><input type=\"text\" ng-required=\"true\" ng-value=\"newExpense.amount? (amountInPounds(newExpense.amount) * ukVatPercentage).toFixed(2) + \\' GBP\\': 0\" placeholder=\"00.00\" disabled=\"disabled\"></li><li><label>Reason</label><textarea at-auto-resize ng-required=\"true\" ng-model=\"newExpense.reason\" ng-trim=\"false\" placeholder=\"why oh why?\"></textarea></li><li><label></label><button ng-click=\"saveExpense()\" class=\"solid\">Save Expense</button> <button ng-click=\"clearExpense()\">cancel</button></li></ul></form><h3>Submitted expenses</h3><div class=\"list-table expenses-data\"><div class=\"header-row\"><div class=\"col-4\">Date</div><div class=\"col-4 figures\">Amount (inc. VAT)</div><div class=\"col-2 figures\">VAT</div><div class=\"col-15\">Reason</div></div><div ng-repeat=\"expense in expenses\" class=\"body-row\"><div class=\"col-4\">{{expense.date | date:\\'dd MMM yyyy\\'}}</div><div class=\"col-4 figures\">{{expense.amount | currency:\"&pound;\"}}</div><div class=\"col-2 figures\">{{expense.vat | currency:\"&pound;\"}}</div><div class=\"col-15\">{{expense.reason}}</div></div></div></div>')}]);","/*!\n * money.js / fx() v0.2\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function(root, undefined) {\n\n\t// Create a safe reference to the money.js object for use below.\n\tvar fx = function(obj) {\n\t\treturn new fxWrapper(obj);\n\t};\n\n\t// Current version.\n\tfx.version = '0.2';\n\n\n\t/* --- Setup --- */\n\n\t// fxSetup can be defined before loading money.js, to set the exchange rates and the base\n\t// (and default from/to) currencies - or the rates can be loaded in later if needed.\n\tvar fxSetup = root.fxSetup || {\n\t\trates : {},\n\t\tbase : \"\"\n\t};\n\n\t// Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\tfx.rates = fxSetup.rates;\n\n\t// Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\tfx.base = fxSetup.base;\n\n\t// Default from / to currencies for conversion via fx.convert():\n\tfx.settings = {\n\t\tfrom : fxSetup.from || fx.base,\n\t\tto : fxSetup.to || fx.base\n\t};\n\n\n\t/* --- Conversion --- */\n\n\t// The base function of the library: converts a value from one currency to another\n\tvar convert = fx.convert = function(val, opts) {\n\t\t// Convert arrays recursively\n\t\tif (typeof val === 'object' && val.length) {\n\t\t\tfor (var i = 0; i< val.length; i++ ) {\n\t\t\t\tval[i] = convert(val[i], opts);\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\n\t\t// Make sure we gots some opts\n\t\topts = opts || {};\n\n\t\t// We need to know the `from` and `to` currencies\n\t\tif( !opts.from ) opts.from = fx.settings.from;\n\t\tif( !opts.to ) opts.to = fx.settings.to;\n\n\t\t// Multiple the value by the exchange rate\n\t\treturn val * getRate( opts.to, opts.from );\n\t};\n\n\t// Returns the exchange rate to `target` currency from `base` currency\n\tvar getRate = function(to, from) {\n\t\t// Save bytes in minified version\n\t\tvar rates = fx.rates;\n\n\t\t// Make sure the base rate is in the rates object:\n\t\trates[fx.base] = 1;\n\n\t\t// Throw an error if either rate isn't in the rates array\n\t\tif ( !rates[to] || !rates[from] ) throw \"fx error\";\n\n\t\t// If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\t\tif ( from === fx.base ) {\n\t\t\treturn rates[to];\n\t\t}\n\n\t\t// If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\t\tif ( to === fx.base ) {\n\t\t\treturn 1 / rates[from];\n\t\t}\n\n\t\t// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n\t\t// relative exchange rate between the two currencies\n\t\treturn rates[to] * (1 / rates[from]);\n\t};\n\n\n\t/* --- OOP wrapper and chaining --- */\n\n\t// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\tvar fxWrapper = function(val) {\n\t\t// Experimental: parse strings to pull out currency code and value:\n\t\tif ( typeof\tval === \"string\" ) {\n\t\t\tthis._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n\t\t\tthis._fx = val.replace(/([^A-Za-z])/g, \"\");\n\t\t} else {\n\t\t\tthis._v = val;\n\t\t}\n\t};\n\n\t// Expose `wrapper.prototype` as `fx.prototype`\n\tvar fxProto = fx.prototype = fxWrapper.prototype;\n\n\t// fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\tfxProto.convert = function() {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(this._v);\n\t\treturn convert.apply(fx, args);\n\t};\n\n\t// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n\t// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\tfxProto.from = function(currency) {\n\t\tvar wrapped = fx(convert(this._v, {from: currency, to: fx.base}));\n\t\twrapped._fx = fx.base;\n\t\treturn wrapped;\n\t};\n\n\t// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\tfxProto.to = function(currency) {\n\t\treturn convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `fx` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = fx;\n\t\t}\n\t\texports.fx = fx;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn fx;\n\t\t});\n\t} else {\n\t\t// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n\t\t// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n\t\tfx.noConflict = (function(previousFx) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `fx` variable:\n\t\t\t\troot.fx = previousFx;\n\t\t\t\t// Delete the noConflict function:\n\t\t\t\tfx.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn fx;\n\t\t\t};\n\t\t})(root.fx);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['fx'] = fx;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}